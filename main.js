/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/rsync/rsync.js
var require_rsync = __commonJS({
  "node_modules/rsync/rsync.js"(exports, module2) {
    var spawn = require("child_process").spawn;
    var path = require("path");
    function Rsync2(config) {
      if (!(this instanceof Rsync2)) {
        return new Rsync2(config);
      }
      config = config || {};
      if (typeof config !== "object") {
        throw new Error("Rsync config must be an Object");
      }
      this._executable = hasOP(config, "executable") ? config.executable : "rsync";
      this._executableShell = hasOP(config, "executableShell") ? config.executableShell : "/bin/sh";
      this._sources = [];
      this._destination = "";
      this._patterns = [];
      this._options = {};
      this._outputHandlers = {
        stdout: null,
        stderr: null
      };
      this._cwd = process.cwd();
      this._env = process.env;
      this._debug = hasOP(config, "debug") ? config.debug : false;
    }
    Rsync2.build = function(options) {
      var command = new Rsync2();
      for (var key in options) {
        if (hasOP(options, key)) {
          var value = options[key];
          if (typeof command[key] === "function") {
            command[key](value);
          }
        }
      }
      return command;
    };
    Rsync2.prototype.set = function(option, value) {
      option = stripLeadingDashes(option);
      if (option && option.length > 0) {
        this._options[option] = value || null;
      }
      return this;
    };
    Rsync2.prototype.unset = function(option) {
      option = stripLeadingDashes(option);
      if (option && Object.keys(this._options).indexOf(option) >= 0) {
        delete this._options[option];
      }
      return this;
    };
    Rsync2.prototype.flags = function(flags, set) {
      if (!arguments.length) {
        return this;
      } else if (arguments.length === 1) {
        set = true;
      } else {
        flags = Array.prototype.slice.call(arguments);
        if (typeof flags[flags.length - 1] === "boolean") {
          set = flags.pop();
        } else {
          set = true;
        }
        flags = flags.join("");
      }
      if (typeof flags === "string") {
        flags = stripLeadingDashes(flags).split("");
      }
      if (isArray(flags)) {
        var obj = {};
        flags.forEach(function(f) {
          obj[f] = set;
        });
        flags = obj;
      }
      for (var key in flags) {
        if (hasOP(flags, key)) {
          var method = flags[key] ? "set" : "unset";
          this[method](stripLeadingDashes(key));
        }
      }
      return this;
    };
    Rsync2.prototype.isSet = function(option) {
      option = stripLeadingDashes(option);
      return Object.keys(this._options).indexOf(option) >= 0;
    };
    Rsync2.prototype.option = function(name) {
      name = stripLeadingDashes(name);
      return this._options[name];
    };
    Rsync2.prototype.patterns = function(patterns) {
      if (arguments.length > 1) {
        patterns = Array.prototype.slice.call(arguments, 0);
      }
      if (!isArray(patterns)) {
        patterns = [patterns];
      }
      patterns.forEach(function(pattern) {
        var action = "?";
        if (typeof pattern === "string") {
          action = pattern.charAt(0);
          pattern = pattern.substring(1);
        } else if (typeof pattern === "object" && hasOP(pattern, "action") && hasOP(pattern, "pattern")) {
          action = pattern.action;
          pattern = pattern.pattern;
        }
        if (action === "-") {
          this.exclude(pattern);
        } else if (action === "+") {
          this.include(pattern);
        } else {
          throw new Error("Invalid pattern: " + pattern);
        }
      }, this);
      return this;
    };
    Rsync2.prototype.exclude = function(patterns) {
      if (arguments.length > 1) {
        patterns = Array.prototype.slice.call(arguments, 0);
      }
      if (!isArray(patterns)) {
        patterns = [patterns];
      }
      patterns.forEach(function(pattern) {
        this._patterns.push({ action: "-", pattern });
      }, this);
      return this;
    };
    Rsync2.prototype.include = function(patterns) {
      if (arguments.length > 1) {
        patterns = Array.prototype.slice.call(arguments, 0);
      }
      if (!isArray(patterns)) {
        patterns = [patterns];
      }
      patterns.forEach(function(pattern) {
        this._patterns.push({ action: "+", pattern });
      }, this);
      return this;
    };
    Rsync2.prototype.command = function() {
      return this.executable() + " " + this.args().join(" ");
    };
    Rsync2.prototype.toString = Rsync2.prototype.command;
    Rsync2.prototype.args = function() {
      var args = [];
      var short = [];
      var long = [];
      for (var key in this._options) {
        if (hasOP(this._options, key)) {
          var value = this._options[key];
          var noval = value === null || value === void 0;
          if (key.length === 1 && noval) {
            short.push(key);
          } else {
            if (isArray(value)) {
              value.forEach(function(val) {
                long.push(buildOption(key, val, escapeShellArg));
              });
            } else {
              long.push(buildOption(key, value, escapeShellArg));
            }
          }
        }
      }
      if (short.length > 0) {
        args.push("-" + short.join(""));
      }
      if (long.length > 0) {
        args = args.concat(long);
      }
      this._patterns.forEach(function(def) {
        if (def.action === "-") {
          args.push(buildOption("exclude", def.pattern, escapeFileArg));
        } else if (def.action === "+") {
          args.push(buildOption("include", def.pattern, escapeFileArg));
        } else {
          debug(this, "Unknown pattern action " + def.action);
        }
      });
      if (this.source().length > 0) {
        args = args.concat(this.source().map(escapeFileArg));
      }
      if (this.destination()) {
        args.push(escapeFileArg(this.destination()));
      }
      return args;
    };
    Rsync2.prototype.cwd = function(cwd) {
      if (arguments.length > 0) {
        if (typeof cwd !== "string") {
          throw new Error("Directory should be a string");
        }
        this._cwd = path.resolve(cwd);
      }
      return this._cwd;
    };
    Rsync2.prototype.env = function(env) {
      if (arguments.length > 0) {
        if (typeof env !== "object") {
          throw new Error("Environment should be an object");
        }
        this._env = env;
      }
      return this._env;
    };
    Rsync2.prototype.output = function(stdout, stderr) {
      if (arguments.length === 1 && Array.isArray(stdout)) {
        stderr = stdout[1];
        stdout = stdout[0];
      }
      if (typeof stdout === "function") {
        this._outputHandlers.stdout = stdout;
      }
      if (typeof stderr === "function") {
        this._outputHandlers.stderr = stdout;
      }
      return this;
    };
    Rsync2.prototype.execute = function(callback, stdoutHandler, stderrHandler) {
      this.output(stdoutHandler, stderrHandler);
      var cmdProc;
      if (process.platform === "win32") {
        cmdProc = spawn("cmd.exe", ["/s", "/c", '"' + this.command() + '"'], { stdio: "pipe", windowsVerbatimArguments: true, cwd: this._cwd, env: this._env });
      } else {
        cmdProc = spawn(this._executableShell, ["-c", this.command()], { stdio: "pipe", cwd: this._cwd, env: this._env });
      }
      if (typeof this._outputHandlers.stdout === "function") {
        cmdProc.stdout.on("data", this._outputHandlers.stdout);
      }
      if (typeof this._outputHandlers.stderr === "function") {
        cmdProc.stderr.on("data", this._outputHandlers.stderr);
      }
      cmdProc.on("close", function(code) {
        var error = null;
        if (code !== 0) {
          error = new Error("rsync exited with code " + code);
        }
        if (typeof callback === "function") {
          callback(error, code, this.command());
        }
      }.bind(this));
      return cmdProc;
    };
    createValueAccessor("debug");
    createValueAccessor("executable");
    createValueAccessor("executableShell");
    createValueAccessor("destination");
    createListAccessor("source", "_sources");
    exposeLongOption("rsh", "shell");
    exposeMultiOption("chmod", "chmod");
    exposeShortOption("delete");
    exposeShortOption("progress");
    exposeShortOption("a", "archive");
    exposeShortOption("z", "compress");
    exposeShortOption("r", "recursive");
    exposeShortOption("u", "update");
    exposeShortOption("q", "quiet");
    exposeShortOption("d", "dirs");
    exposeShortOption("l", "links");
    exposeShortOption("n", "dry");
    exposeShortOption("H", "hardLinks");
    exposeShortOption("p", "perms");
    exposeShortOption("E", "executability");
    exposeShortOption("g", "group");
    exposeShortOption("o", "owner");
    exposeShortOption("A", "acls");
    exposeShortOption("X", "xattrs");
    exposeShortOption("devices");
    exposeShortOption("specials");
    exposeShortOption("t", "times");
    module2.exports = Rsync2;
    function createValueAccessor(name, internal) {
      var container = internal || "_" + name;
      Rsync2.prototype[name] = function(value) {
        if (!arguments.length)
          return this[container];
        this[container] = value;
        return this;
      };
    }
    function createListAccessor(name, internal) {
      var container = internal || "_" + name;
      Rsync2.prototype[name] = function(value) {
        if (!arguments.length)
          return this[container];
        if (isArray(value)) {
          value.forEach(this[name], this);
        } else if (typeof value !== "string") {
          throw new Error("Value for Rsync::" + name + " must be a String");
        } else if (this[container].indexOf(value) < 0) {
          this[container].push(value);
        }
        return this;
      };
    }
    function exposeShortOption(option, name) {
      name = name || option;
      Rsync2.prototype[name] = function(set) {
        if (!arguments.length)
          set = true;
        var method = set ? "set" : "unset";
        return this[method](option);
      };
    }
    function exposeMultiOption(option, name) {
      name = name || option;
      Rsync2.prototype[name] = function(value) {
        if (!arguments.length)
          return this.option(option);
        if (!value) {
          this.unset(option);
        } else if (isArray(value)) {
          value.forEach(this[name], this);
        } else {
          var current = this.option(option);
          if (!current) {
            value = [value];
          } else if (!isArray(current)) {
            value = [current, value];
          } else {
            value = current.concat(value);
          }
          this.set(option, value);
        }
        return this;
      };
    }
    function exposeLongOption(option, name) {
      name = name || option;
      Rsync2.prototype[name] = function(value) {
        if (!arguments.length)
          return this.option(option);
        var method = value ? "set" : "unset";
        return this[method](option, value);
      };
    }
    function buildOption(name, value, escapeArg) {
      if (typeof escapeArg === "boolean") {
        escapeArg = !escapeArg ? noop : null;
      }
      if (typeof escapeArg !== "function") {
        escapeArg = escapeShellArg;
      }
      var single = name.length === 1 ? true : false;
      var prefix = single ? "-" : "--";
      var glue = single ? " " : "=";
      var option = prefix + name;
      if (arguments.length > 1 && value) {
        value = escapeArg(String(value));
        option += glue + value;
      }
      return option;
    }
    function escapeShellArg(arg) {
      if (!/(["'`\\$ ])/.test(arg)) {
        return arg;
      }
      return '"' + arg.replace(/(["'`\\$])/g, "\\$1") + '"';
    }
    function escapeFileArg(filename) {
      filename = filename.replace(/(["'`\s\\\(\)\\$])/g, "\\$1");
      if (!/(\\\\)/.test(filename)) {
        return filename;
      }
      if (process.platform === "win32") {
        filename = filename.replace(/\\\\/g, "/").replace(/^["]?[A-Z]\:\//ig, "/");
      }
      return filename;
    }
    function stripLeadingDashes(value) {
      if (typeof value === "string") {
        value = value.replace(/^[\-]*/, "");
      }
      return value;
    }
    function isArray(value) {
      if (typeof Array.isArray === "function") {
        return Array.isArray(value);
      } else {
        return toString.call(value) == "[object Array]";
      }
    }
    function hasOP(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    }
    function noop() {
    }
    function debug(cmd, message) {
      if (!cmd._debug)
        return;
    }
  }
});

// main.ts
__export(exports, {
  default: () => MyPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var Rsync = require_rsync();
var DEFAULT_SETTINGS = {
  keyPath: "",
  remoteUrl: "",
  remotePath: "",
  cygwinPath: "F:/cygwin/bin/bash.exe"
};
function rsyncwrapper(source, dest, settings) {
  console.log("Syncing...");
  var rsync = new Rsync().flags("rqu").executable(settings.cygwinPath + " -lc 'rsync").set("rsh", "ssh -i " + settings.keyPath).set("size-only").set("exclude", "*plugins").source(source).destination(dest);
  var pass = "true";
  if (settings.keyPath == "")
    pass = "No key";
  if (pass === "true")
    rsync.execute(function(error, code, cmd) {
      if (error == null)
        console.log("Done!");
      else
        console.log(error);
    });
  else
    console.log('Sync failed! "' + pass + '"');
}
function rsyncdelete(localPath, filePath, settings, vaultName) {
  console.log("Removing old file...");
  localPath = "/cygdrive/c/" + localPath;
  const fileName = filePath.split("/").last();
  filePath = filePath.slice(0, -fileName.length);
  var rsync = new Rsync().flags("r").executable(settings.cygwinPath + " -lc 'rsync").set("rsh", "ssh -i " + settings.keyPath).set("delete").set("include", fileName).set("exclude", "*").source(localPath + vaultName + "/.obsidian/").destination(settings.remoteUrl + ":" + settings.remotePath + vaultName + "/" + filePath);
  var pass = "true";
  if (settings.keyPath == "")
    pass = "No key";
  rsync.output(function(data) {
    console.log(data);
  }, function(data) {
    console.log("ERROR!!");
    console.log(data);
  });
  if (pass === "true")
    rsync.execute(function(error, code, cmd) {
      if (error == null) {
        rsyncwrapper(localPath + vaultName, settings.remoteUrl + ":" + settings.remotePath, settings);
      } else
        console.log(error);
    });
  else
    console.log('Sync failed! "' + pass + '"');
}
var MyPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      const debug = false;
      const vaultName = this.app.vault.getName();
      const keyPath = this.settings.keyPath;
      const remote = this.settings.remoteUrl + ":" + this.settings.remotePath;
      const local = "/cygdrive/c/" + this.app.vault.adapter.basePath.slice(3, -vaultName.length);
      const settings = this.settings;
      var app = this.app;
      rsyncwrapper(remote + vaultName, local, this.settings);
      this.registerEvent(this.app.vault.on("modify", () => {
        rsyncwrapper(local + vaultName, remote, this.settings);
      }));
      this.registerEvent(this.app.vault.on("delete", function(file) {
        console.log(file);
      }));
      this.registerEvent(this.app.vault.on("rename", function(file, oldPath) {
        rsyncdelete(app.vault.adapter.basePath.slice(3, -vaultName.length), oldPath, settings, vaultName);
      }));
      if (debug) {
        const ribbonIconEl = this.addRibbonIcon("dice", "Sample Plugin", (evt) => {
          new import_obsidian.Notice("This is a notice!");
        });
        ribbonIconEl.addClass("my-plugin-ribbon-class");
        const statusBarItemEl = this.addStatusBarItem();
        statusBarItemEl.setText("Status Bar Text");
        this.addCommand({
          id: "open-sample-modal-simple",
          name: "Open sample modal (simple)",
          callback: () => {
            new SampleModal(this.app).open();
          }
        });
        this.addCommand({
          id: "sample-editor-command",
          name: "Sample editor command",
          editorCallback: (editor, view) => {
            console.log(editor.getSelection());
            editor.replaceSelection("Sample Editor Command");
          }
        });
        this.addCommand({
          id: "open-sample-modal-complex",
          name: "Open sample modal (complex)",
          checkCallback: (checking) => {
            const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
            if (markdownView) {
              if (!checking) {
                new SampleModal(this.app).open();
              }
              return true;
            }
          }
        });
      }
      this.addSettingTab(new SampleSettingTab(this.app, this));
      this.registerDomEvent(document, "click", (evt) => {
      });
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var SampleModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Sync Settings." });
    new import_obsidian.Setting(containerEl).setName("SSH Key Path").setDesc("Your SSH Private Key, used for logging into server. Please generate the key to use no password, just wont work otherwise. If you're on Windows, use the cygdrive path to the key.").addText((text) => text.setPlaceholder("Enter the path to your secret key.").setValue(this.plugin.settings.keyPath).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.keyPath = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Remote address").setDesc("Remote server URL/IP").addText((text) => text.setPlaceholder("name@example.com").setValue(this.plugin.settings.remoteUrl).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.remoteUrl = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Remote directory").setDesc("Path to the remote backup folder.").addText((text) => text.setPlaceholder("~/.obsidian/sync").setValue(this.plugin.settings.remotePath).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.remotePath = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Cygwin bash path").setDesc("Needed for Windows.").addText((text) => text.setPlaceholder("F:/cygwin/bin/bash.exe").setValue(this.plugin.settings.cygwinPath).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.cygwinPath = value;
      yield this.plugin.saveSettings();
    })));
  }
};
/**
 * Rsync is a wrapper class to configure and execute an `rsync` command
 * in a fluent and convenient way.
 *
 * A new command can be set up by creating a new `Rsync` instance of
 * obtaining one through the `build` method.
 *
 * @example
 *   // using the constructor
 *   var rsync = new Rsync()
 *       .source('/path/to/source')
 *       .destination('myserver:destination/');
 *
 *   // using the build method with options
 *   var rsync = Rsync.build({
 *     source:      '/path/to/source',
 *     destination: 'myserver:destination/'
 *   });
 *
 * Executing the command can be done using the `execute` method. The command
 * is executed as a child process and three callbacks can be registered. See
 * the `execute` method for more details.
 *
 * @example
 *   rsync.execute(function(error, code, cmd) {
 *     // function called when the child process is finished
 *   }, function(stdoutChunk) {
 *     // function called when a chunk of text is received on stdout
 *   }, function stderrChunk) {
 *     // function called when a chunk of text is received on stderr
 *   });
 *
 * @author      Mattijs Hoitink <mattijs@monkeyandmachine.com>
 * @copyright   Copyright (c) 2013, Mattijs Hoitink <mattijs@monkeyandmachine.com>
 * @license     The MIT License
 *
 * @constructor
 * @param {Object} config Configuration settings for the Rsync wrapper.
 */
//# sourceMappingURL=data:application/json;base64,
